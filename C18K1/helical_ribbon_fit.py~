# see /home/joey/bedzyk_research_group/form_factors/terech_helical_ribbon.ipynb for more details


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use('veusz')
import scipy.integrate as integrate
import scipy.special as sp
from scipy.optimize import curve_fit, leastsq
from scipy.signal import find_peaks
import sys
from tqdm import tqdm
from scipy.interpolate import UnivariateSpline as us




l = ["6","7","8p7","11"]
cg=[pd.read_csv("/home/joey/Documents/bedzyk_research_group/reduced_data/C18K1/sample108.csv",names=["q","I","error"],header=1,comment='#')]#for l in ls]
#cg2=[pd.DataFrame.drop_duplicates(c,['q']) for c in cg]
cg[0]['I']=cg[0]['I']/np.max(cg[0]['I'].values)
cg



def print_params(p,p_names):
    for i in range(0,len(p)):
        print("{} = {}".format(p_names[i],p[i]))


# define a sort key
def sort_key(company):
    return company[0]



def f1(q,w,n,eps_n):
    return eps_n*(np.sinc(n*w/2/np.pi))**2


def s_poly_bilayer_a2(qvals,R,delP,psi,A):
    intensity=[]
    print(R,delP,psi,A)
    lh=0.755
    rho_h=420
    rho_t=300
    rho_s=334
    a = 0.951
    del_R = 0.1*R # 5% polydispersity
    Rs = np.arange(R-del_R,R+del_R,del_R/10)
    intensity=[]
    for q in qvals:    
        temp=0
        intensity1=[]
        for R in Rs:
            b=1/np.tan(psi)
            for n in [0,1,2,3]:
                if n==0:
                    epsilon=1
                    if q>=n*b/R:
                        qn=n*b/(q*R)
                        g = (rho_h-rho_s)*(integrate.quad(lambda x: x*sp.jv(n,q*x*(1-qn**2)**(0.5)), a*R, R)[0])+(rho_t-rho_h)*(integrate.quad(lambda x: x*sp.jv(n,q*x*(1-qn**2)**(0.5)), a*R+lh, R-lh)[0])
                    elif q<n*b/R:
                        qn=1
                        g = (rho_h-rho_s)*(integrate.quad(lambda x: x*sp.jv(n,q*x*(1-qn**2)**(0.5)), a*R, R)[0])+(rho_t-rho_h)*(integrate.quad(lambda x: x*sp.jv(n,q*x*(1-qn**2)**(0.5)), a*R+lh, R-lh)[0])
                    temp+=g**2*f1(q,2*np.pi*delP,n,epsilon)   
                else:
                    epsilon=2
                    if q>=n*b/R:
                        qn=n*b/(q*R)
                        g = (rho_h-rho_s)*(integrate.quad(lambda x: x*sp.jv(n,q*x*(1-qn**2)**(0.5)), a*R, R)[0])+(rho_t-rho_h)*(integrate.quad(lambda x: x*sp.jv(n,q*x*(1-qn**2)**(0.5)), a*R+lh, R-lh)[0])
                    elif q<n*b/R:
                        qn=1
                        g = (rho_h-rho_s)*(integrate.quad(lambda x: x*sp.jv(n,q*x*(1-qn**2)**(0.5)), a*R, R)[0])+(rho_t-rho_h)*(integrate.quad(lambda x: x*sp.jv(n,q*x*(1-qn**2)**(0.5)), a*R+lh, R-lh)[0])
                    temp+=g**2*f1(q,2*np.pi*delP,n,epsilon)
            intensity1.append(A*temp*(delP**2)*2*np.pi*R*np.tan(psi)/q)
        intensity.append(np.mean(intensity1,axis=0))
    s=us(qvals,intensity/np.max(intensity),s=0)
    return s(qvals)

#R,delP,psi,A; a=0.95, del_R = 20%R, lh=0.755
#C16K1, pH 6 : guess = [66.56594824997335,0.542053606368151,0.5102673464476227,1.3734777470701654e-10]
#C18K1, pH 6.2: guess = [78.5,0.53,0.61,2.374e-11],10% polydispersity, sample108.csv
#C18K1, pH 7.1: guess = [77.5,0.53,0.61,2.074e-11], 10% polydispersity, sample111.csv
guess = [62.0,0.5,0.60,1]
xdata=10*cg[0][cg[0].columns[0]].values[0:100]
ydata=cg[0][cg[0].columns[1]].values[0:100]
w= [[k, v] for k, v in zip(xdata, ydata)]
w.sort(key=sort_key, reverse=False)
xdata = list(zip(*w))[0]
ydata = list(zip(*w))[1]
plt.loglog(xdata,ydata,label="C$_{18}$K")
plt.loglog(xdata,s_poly_bilayer_a2(xdata,*guess),label="sim")
popt,pcov = curve_fit(s_poly_bilayer_a2,xdata,ydata,p0=guess,sigma=ydata,bounds=[(50,0,np.pi/12,0),(100,1,np.pi/3,1)])
plt.loglog(xdata,s_poly_bilayer_a2(xdata,*popt),label="fit")
plt.legend()
plt.xlabel('q (nm$^{-1}$)')
#plt.ylabel('Intensity (cm$^{-1}$)')
plt.ylabel('Intensity/I$_0$')
#plt.title('pH 6')
print("sim")
print_params(guess,["R","delta/P","psi","scaling"])
#print("fit")
#print_params(popt,["R","delta/P","psi","scaling"])
plt.show()
